{"ast":null,"code":"import _classCallCheck from \"/Users/sigurd/village-defense/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sigurd/village-defense/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sigurd/village-defense/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sigurd/village-defense/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sigurd/village-defense/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sigurd/village-defense/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nvar WebSocketConnection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WebSocketConnection, _Component);\n\n  function WebSocketConnection(props) {\n    var _this;\n\n    _classCallCheck(this, WebSocketConnection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocketConnection).call(this, props));\n    _this.connection = new WebSocket('ws://127.0.0.1:1337');\n    _this.connection.onopen = _this.onOpen;\n    _this.connection.onerror = _this.onError;\n    _this.connection.onmessage = _this.onMessage;\n    return _this;\n  }\n\n  _createClass(WebSocketConnection, [{\n    key: \"onOpen\",\n    value: function onOpen() {\n      console.log('Connection is opened...');\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(error) {\n      console.log('Connection error occured!', error);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(message) {\n      /* \n      try {\n        var json = JSON.parse(message.data);\n      } catch (e) {\n        console.log('Invalid JSON: ', message.data);\n        return;\n      }\n       if (json.type === 'color') { \n        myColor = json.data;\n        status.text(myName + ': ').css('color', myColor);\n        input.removeAttr('disabled').focus();\n        // from now user can start sending messages\n      } else if (json.type === 'history') { // entire message history\n        // insert every single message to the chat window\n        for (var i=0; i < json.data.length; i++) {\n        addMessage(json.data[i].author, json.data[i].text,\n            json.data[i].color, new Date(json.data[i].time));\n        }\n      } else if (json.type === 'message') { // it's a single message\n        // let the user write another message\n        input.removeAttr('disabled'); \n        addMessage(json.data.author, json.data.text,\n                   json.data.color, new Date(json.data.time));\n      } else {\n        console.log('Untyped JSON message:', json);\n      }\n      */\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return WebSocketConnection;\n}(Component);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(App, _Component2);\n\n  function App(props) {\n    var _this2;\n\n    _classCallCheck(this, App);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this2.state = {\n      counter: 0\n    };\n    return _this2;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(WebSocketConnection, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Chat, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/sigurd/village-defense/src/App.js"],"names":["React","Component","WebSocketConnection","props","connection","WebSocket","onopen","onOpen","onerror","onError","onmessage","onMessage","console","log","error","message","App","state","counter"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;;IAEMC,mB;;;;;AACJ,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6FAAMA,KAAN;AAEA,UAAKC,UAAL,GAAkB,IAAIC,SAAJ,CAAc,qBAAd,CAAlB;AACA,UAAKD,UAAL,CAAgBE,MAAhB,GAAyB,MAAKC,MAA9B;AACA,UAAKH,UAAL,CAAgBI,OAAhB,GAA0B,MAAKC,OAA/B;AACA,UAAKL,UAAL,CAAgBM,SAAhB,GAA4B,MAAKC,SAAjC;AANiB;AAQlB;;;;6BACQ;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;;;4BACOC,K,EAAO;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCC,KAAzC;AACD;;;8BACSC,O,EAAS;AACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BD;;;6BACQ;AACP,aAAO,IAAP;AACA;;;;EAhD8Bd,S;;IAmD5Be,G;;;;;AACJ,eAAYb,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;AACA,WAAKc,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AAFiB;AAGlB;;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAQD;;;;EAfejB,S;;AAkBlB,eAAee,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass WebSocketConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connection = new WebSocket('ws://127.0.0.1:1337');\n    this.connection.onopen = this.onOpen;\n    this.connection.onerror = this.onError;\n    this.connection.onmessage = this.onMessage;\n  \n  }\n  onOpen() {\n    console.log('Connection is opened...');\n  }\n  onError(error) {\n    console.log('Connection error occured!', error);\n  }\n  onMessage(message) {\n    /* \n    try {\n      var json = JSON.parse(message.data);\n    } catch (e) {\n      console.log('Invalid JSON: ', message.data);\n      return;\n    }\n\n    if (json.type === 'color') { \n      myColor = json.data;\n      status.text(myName + ': ').css('color', myColor);\n      input.removeAttr('disabled').focus();\n      // from now user can start sending messages\n    } else if (json.type === 'history') { // entire message history\n      // insert every single message to the chat window\n      for (var i=0; i < json.data.length; i++) {\n      addMessage(json.data[i].author, json.data[i].text,\n          json.data[i].color, new Date(json.data[i].time));\n      }\n    } else if (json.type === 'message') { // it's a single message\n      // let the user write another message\n      input.removeAttr('disabled'); \n      addMessage(json.data.author, json.data.text,\n                 json.data.color, new Date(json.data.time));\n    } else {\n      console.log('Untyped JSON message:', json);\n    }\n    */\n  }\n  render() {\n    return null;\n   }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n  render() {\n    return (\n      <div>\n        <WebSocketConnection />\n        <Chat>\n\n        </Chat>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}