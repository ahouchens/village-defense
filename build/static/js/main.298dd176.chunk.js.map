{"version":3,"sources":["components/chat/Chat.js","components/map-grid/MapGrid.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","messagesEnd","scrollIntoView","behavior","handleKeyPress","bind","assertThisInitialized","handleChange","state","chatMessage","disabled","chatName","authorColor","chatHistory","input","React","createRef","e","key","connection","send","JSON","stringify","type","data","setState","target","value","prevProps","socketMessage","socketMessageObject","userName","prevState","concat","toConsumableArray","parse","console","log","length","_this2","react_default","a","createElement","className","map","chatHistoryItem","time","style","color","marginRight","author","text","float","clear","ref","el","id","statusText","onKeyPress","onChange","Component","PlayerCharacter","speed","topPosition","leftPosition","currentPlayerCharacter","nextProps","newTopPosition","newLeftPosition","newUserName","newColor","isCurrentPlayerCharacter","onKeyDown","tabIndex","backgroundColor","top","left","WebkitTransition","GridTile","MapGrid","_this3","playerCharacters","index","findIndex","character","assign","playerCharacterIndex","splice","_this4","playerCharacter","MapGrid_PlayerCharacter","MapGrid_GridTile","WebSocketConnection","window","location","protocol","host","WebSocket","onopen","onOpen","onerror","onError","onmessage","onMessage","error","message","components_map_grid_MapGrid","components_chat_Chat","App","counter","App_WebSocketConnection","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.298dd176.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Chat.css';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      chatMessage: '',\n      disabled: '',\n      chatName: false,\n      authorColor: false,\n      chatHistory: [],\n    };\n    this.input = React.createRef();\n  }\n\n  handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      let chatMessage = this.state.chatMessage;\n      if (!chatMessage) {\n        return;\n      }\n   \n      this.props.connection.send(\n        JSON.stringify({\n          type: 'chat-message',\n          data: chatMessage\n        })\n      );\n\n\n      this.setState({\n        chatMessage: '',\n        // disabled: 'disabled',\n      });\n\n      // we know that the first message sent from a user their name  \n      if (this.state.chatName === false) {\n        this.setState({ chatName: chatMessage });\n      }\n    }\n  }\n  handleChange(e) {\n    this.setState({chatMessage: e.target.value});\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.socketMessage !== this.props.socketMessage) {\n      let socketMessage = this.socketMessageObject();\n\n      if (!socketMessage) {\n        return;\n      }\n\n      if (socketMessage.type === 'color') {\n        this.setState({\n          chatName: socketMessage.userName,\n          authorColor: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'history') {\n        this.setState({\n          chatHistory: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'message') {\n        this.setState(prevState => ({\n          chatHistory: [...prevState.chatHistory, socketMessage.data]\n        }));\n        this.scrollToBottom();\n      }\n    }\n  }\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  socketMessageObject() {\n    try {\n      return JSON.parse(this.props.socketMessage);\n    } catch (e) {\n      console.log('Invalid JSON: ', this.props.socketMessage);\n      return false;\n    }\n  }\n  isUserConnected() {\n    return !!this.socketMessageObject();\n  }\n  statusText() {\n    if (this.state.chatName.length > 0) {\n      return this.state.chatName;\n    }\n  \n    return 'Enter name:';\n  }\n  render() {\n    return (\n      <div className=\"chat\">\n        <div className=\"content\">\n          {this.state.chatHistory.map((chatHistoryItem) =>\n            <p className=\"content-message\" key={chatHistoryItem.time} >\n              <span \n                style={{\n                  color: chatHistoryItem.color,\n                  marginRight: '5px'\n                }}\n              >\n                {chatHistoryItem.author}\n              </span> \n              {chatHistoryItem.text}\n            </p>\n          )}\n          <div style={{ float:\"left\", clear: \"both\" }}\n            ref={(el) => { this.messagesEnd = el; }}>\n          </div>\n        </div>\n        <div>\n          <div\n            id=\"status\" \n            className=\"chat-status\"\n            style={{\n              color: this.state.authorColor\n          }}>\n            {this.statusText()}\n          </div>\n          <input\n            className=\"chat-input\"\n            type=\"text\" \n            id=\"input\" \n            value={this.state.chatMessage}\n            disabled={this.state.disabled}\n            onKeyPress={this.handleKeyPress}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chat;","import React, { Component } from 'react';\nimport './MapGrid.css';\n\nclass PlayerCharacter extends Component {\n  constructor(props) {\n    super(props);\n    this.onKeyPress = this.onKeyPress.bind(this);\n\n    this.state = {\n      speed: 5,\n      id: this.props.id,\n      topPosition: this.props.topPosition,\n      leftPosition: this.props.leftPosition,\n      color: this.props.color,\n      userName: this.props.userName,\n      currentPlayerCharacter: this.props.currentPlayerCharacter\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if(this.props !== nextProps) {\n      this.setState({\n        id: nextProps.id,\n        topPosition: nextProps.topPosition,\n        leftPosition: nextProps.leftPosition,\n        color: nextProps.color,\n        currentPlayerCharacter: nextProps.currentPlayerCharacter\n      });\n    }\n  }\n  isCurrentPlayerCharacter() {\n    return this.state.currentPlayerCharacter.id === this.props.id;\n  }\n  onKeyPress(e) {\n    let newTopPosition = this.state.topPosition;\n    let newLeftPosition = this.state.leftPosition;\n    let id = this.state.id;\n    let newUserName = this.state.userName;\n    let newColor = this.state.color; \n    let type = 'update-character';\n\n    if (e.key === 'w' && this.isCurrentPlayerCharacter()) {\n      newTopPosition = this.state.topPosition - this.state.speed;\n    }\n\n    if (e.key === 's' && this.isCurrentPlayerCharacter()) {\n      newTopPosition = this.state.topPosition + this.state.speed;\n    }\n  \n    if (e.key === 'a' && this.isCurrentPlayerCharacter()) {\n      newLeftPosition = this.state.leftPosition - this.state.speed;\n    }\n\n    if (e.key === 'd' && this.isCurrentPlayerCharacter()) {\n      newLeftPosition = this.state.leftPosition + this.state.speed;\n    }\n\n    this.setState({\n      color: newColor,\n      topPosition: newTopPosition,\n      leftPosition: newLeftPosition,\n      userName: newUserName,\n      id: id,\n      type: type,\n    });\n\n    this.props.connection.send(JSON.stringify({\n      type: 'update-character',\n      id: this.state.id,\n      userName: this.state.userName,\n      color: this.state.color,\n      leftPosition: newLeftPosition,\n      topPosition: newTopPosition,\n    }));\n\n  }\n  render() {\n    return(\n      <div\n        className=\"player-character\"\n        key={this.state.id}\n        onKeyDown={this.onKeyPress}\n        tabIndex=\"0\"\n        style={{\n          backgroundColor: this.state.color,\n          top: this.state.topPosition + 'px',\n          left: this.state.leftPosition + 'px',\n          WebkitTransition: 'all 0.7s ease-out'\n        }}\n        >\n      </div>\n    );\n  }\n}\n\n\nclass GridTile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      \n    };\n  }\n  render() {\n    return(\n      <div className=\"grid-tile\">\n\n      </div>\n    );\n  }\n}\n\nclass MapGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    \n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      playerCharacters: [],\n      currentPlayerCharacter: {},\n    };\n    this.input = React.createRef();\n  }\n\n\n  handleChange(e) {\n    this.setState({chatMessage: e.target.value});\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.socketMessage !== this.props.socketMessage) {\n      let socketMessage = this.socketMessageObject();\n      // console.log('socketMessage', socketMessage);\n\n      if (!socketMessage) {\n        return;\n      }\n\n      if (socketMessage.type === 'current-player-character') {\n        console.log('current player character!');\n        this.setState(prevState => ({\n          currentPlayerCharacter: socketMessage\n        }));\n      }\n      if (socketMessage.type === 'invoke-character') {\n        this.setState(prevState => ({\n          playerCharacters: [...prevState.playerCharacters, socketMessage],\n        }));\n      }\n\n      if (socketMessage.type === 'update-character') {\n        let index = this.state.playerCharacters.findIndex((character) => {\n          return character.id === socketMessage.id;\n        });\n\n        let playerCharacters = [...this.state.playerCharacters];\n\n        playerCharacters[index] = Object.assign(this.state.playerCharacters[index], {\n          id: socketMessage.id,\n          topPosition: socketMessage.topPosition,\n          leftPosition: socketMessage.leftPosition,\n          color: socketMessage.color\n        });\n\n        Object.assign(playerCharacters[index], {\n          id: socketMessage.id,\n          topPosition: socketMessage.topPosition,\n          leftPosition: socketMessage.leftPosition,\n          color: socketMessage.color\n        });\n\n       this.setState({ playerCharacters: playerCharacters });\n\n      }\n\n      if (socketMessage.type === 'remove-character') {\n        let playerCharacterIndex = this.state.playerCharacters.findIndex((character) => {\n          return character.id === socketMessage.id;\n        });\n        let playerCharacters = [...this.state.playerCharacters];\n        playerCharacters.splice(playerCharacterIndex, 1);\n        this.setState({ playerCharacters: playerCharacters });\n      }\n\n\n    }\n  }\n\n  socketMessageObject() {\n    try {\n      return JSON.parse(this.props.socketMessage);\n    } catch (e) {\n      console.log('Invalid JSON: ', this.props.socketMessage);\n      return false;\n    }\n  }\n  render() {\n    return (\n      <div className=\"grid\"> \n        {this.state.playerCharacters.map((playerCharacter) =>\n          <PlayerCharacter \n            id={playerCharacter.id}\n            key={playerCharacter.id}\n            topPosition={playerCharacter.topPosition}\n            leftPosition={playerCharacter.leftPosition}\n            color={playerCharacter.color}\n            userName={playerCharacter.userName}\n\n            connection={this.props.connection}\n            currentPlayerCharacter={this.state.currentPlayerCharacter}\n          /> \n\n        )}\n        <div className=\"grid-tile-row\">\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n        </div>\n        <div className=\"grid-tile-row\">\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n        </div>\n        <div className=\"grid-tile-row\">\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n        </div>\n        <div className=\"grid-tile-row\">\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n          <GridTile />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MapGrid;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './components/chat/Chat.js';\nimport MapGrid from './components/map-grid/MapGrid.js';\n\nclass WebSocketConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    let socketProtocol = (window.location.protocol === \"https:\") ? \"wss://\" : \"ws://\";\n    let socketUrl = socketProtocol + window.location.host;\n    socketUrl = 'ws://localhost:5000';\n  \n    this.connection = new WebSocket(socketUrl);\n\n    this.connection.onopen = this.onOpen;\n    this.connection.onerror = this.onError;\n    this.connection.onmessage = this.onMessage.bind(this);\n\n    this.state = {\n      socketMessage: { data: '' }\n    };\n  \n  }\n  onOpen() {\n    console.log('Connection is opened...');\n  }\n  onError(error) {\n    console.log('Connection error occured!', error);\n  }\n\n  onMessage(message) {\n    this.setState({socketMessage: message});\n  }\n  render() {\n    return (\n      <div className=\"app-container\"> \n        <MapGrid \n          connection={this.connection}\n          socketMessage={this.state.socketMessage.data}\n        />\n        <Chat \n          connection={this.connection}\n          socketMessage={this.state.socketMessage.data}\n        />\n      </div>\n    );\n   }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1> Village Defense </h1>\n        <WebSocketConnection socketMessage={this.state.socketMessage}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}