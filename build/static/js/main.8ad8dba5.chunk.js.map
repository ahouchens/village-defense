{"version":3,"sources":["components/chat/Chat.js","components/map-grid/MapGrid.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","messagesEnd","scrollIntoView","behavior","handleKeyPress","bind","assertThisInitialized","handleChange","state","chatMessage","disabled","chatName","authorColor","chatHistory","input","React","createRef","e","key","connection","send","setState","target","value","prevProps","socketMessage","socketMessageObject","type","userName","data","prevState","concat","toConsumableArray","JSON","parse","console","log","length","_this2","react_default","a","createElement","className","map","chatHistoryItem","time","style","color","marginRight","author","text","float","clear","ref","el","id","statusText","onKeyPress","onChange","Component","MapGrid","WebSocketConnection","socketProtocol","window","location","protocol","socketUrl","host","WebSocket","onopen","onOpen","onerror","onError","onmessage","onMessage","error","message","components_map_grid_MapGrid","components_chat_Chat","App","counter","App_WebSocketConnection","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ad8dba5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Chat.css';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      chatMessage: '',\n      disabled: '',\n      chatName: false,\n      authorColor: false,\n      chatHistory: [],\n    };\n    this.input = React.createRef();\n  }\n\n  handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      let chatMessage = this.state.chatMessage;\n      if (!chatMessage) {\n        return;\n      }\n   \n      this.props.connection.send(chatMessage);\n      this.setState({\n        chatMessage: '',\n        // disabled: 'disabled',\n      });\n\n      // we know that the first message sent from a user their name  \n      if (this.state.chatName === false) {\n        this.setState({ chatName: chatMessage });\n      }\n    }\n  }\n  handleChange(e) {\n    this.setState({chatMessage: e.target.value});\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.socketMessage !== this.props.socketMessage) {\n      let socketMessage = this.socketMessageObject();\n\n      if (!socketMessage) {\n        return;\n      }\n\n      if (socketMessage.type === 'color') {\n        this.setState({\n          chatName: socketMessage.userName,\n          authorColor: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'history') {\n        this.setState({\n          chatHistory: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'message') {\n        this.setState(prevState => ({\n          chatHistory: [...prevState.chatHistory, socketMessage.data]\n        }));\n        this.scrollToBottom();\n      }\n    }\n  }\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  socketMessageObject() {\n    try {\n      return JSON.parse(this.props.socketMessage);\n    } catch (e) {\n      console.log('Invalid JSON: ', this.props.socketMessage);\n      return false;\n    }\n  }\n  isUserConnected() {\n    return !!this.socketMessageObject();\n  }\n  statusText() {\n    if (this.state.chatName.length > 0) {\n      return this.state.chatName;\n    }\n  \n    return 'Enter name:';\n  }\n  render() {\n    return (\n      <div className=\"chat\">\n        <div className=\"content\">\n          {this.state.chatHistory.map((chatHistoryItem) =>\n            <p className=\"content-message\" key={chatHistoryItem.time} >\n              <span \n                style={{\n                  color: chatHistoryItem.color,\n                  marginRight: '5px'\n                }}\n              >\n                {chatHistoryItem.author}\n              </span> \n              {chatHistoryItem.text}\n            </p>\n          )}\n          <div style={{ float:\"left\", clear: \"both\" }}\n            ref={(el) => { this.messagesEnd = el; }}>\n          </div>\n        </div>\n        <div>\n          <div\n            id=\"status\" \n            className=\"chat-status\"\n            style={{\n              color: this.state.authorColor\n          }}>\n            {this.statusText()}\n          </div>\n          <input\n            className=\"chat-input\"\n            type=\"text\" \n            id=\"input\" \n            value={this.state.chatMessage}\n            disabled={this.state.disabled}\n            onKeyPress={this.handleKeyPress}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chat;","import React, { Component } from 'react';\nimport './MapGrid.css';\n\nclass MapGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      chatMessage: '',\n      disabled: '',\n      chatName: false,\n      authorColor: false,\n      chatHistory: [],\n    };\n    this.input = React.createRef();\n  }\n\n  handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      let chatMessage = this.state.chatMessage;\n      if (!chatMessage) {\n        return;\n      }\n   \n      this.props.connection.send(chatMessage);\n      this.setState({\n        chatMessage: '',\n        // disabled: 'disabled',\n      });\n\n      // we know that the first message sent from a user their name  \n      if (this.state.chatName === false) {\n        this.setState({ chatName: chatMessage });\n      }\n    }\n  }\n  handleChange(e) {\n    this.setState({chatMessage: e.target.value});\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.socketMessage !== this.props.socketMessage) {\n      let socketMessage = this.socketMessageObject();\n\n      if (!socketMessage) {\n        return;\n      }\n\n      if (socketMessage.type === 'color') {\n        this.setState({\n          chatName: socketMessage.userName,\n          authorColor: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'history') {\n        this.setState({\n          chatHistory: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'message') {\n        this.setState(prevState => ({\n          chatHistory: [...prevState.chatHistory, socketMessage.data]\n        }));\n        this.scrollToBottom();\n      }\n    }\n  }\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n  socketMessageObject() {\n    try {\n      return JSON.parse(this.props.socketMessage);\n    } catch (e) {\n      console.log('Invalid JSON: ', this.props.socketMessage);\n      return false;\n    }\n  }\n  isUserConnected() {\n    return !!this.socketMessageObject();\n  }\n  statusText() {\n    if (this.state.chatName.length > 0) {\n      return this.state.chatName;\n    }\n  \n    return 'Enter name:';\n  }\n  render() {\n    return (\n      <div className=\"map-container\"> \n        <div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MapGrid;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './components/chat/Chat.js';\nimport MapGrid from './components/map-grid/MapGrid.js';\n\nclass WebSocketConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    let socketProtocol = (window.location.protocol === \"https:\") ? \"wss://\" : \"ws://\";\n    let socketUrl = socketProtocol + window.location.host;\n    // socketUrl = 'ws://localhost:5000';\n\n    console.log('socketProtocol', socketProtocol);\n    console.log('window.location.host', window.location.host);\n    console.log('socketUrl', socketUrl);\n  \n    this.connection = new WebSocket(socketUrl);\n\n    this.connection.onopen = this.onOpen;\n    this.connection.onerror = this.onError;\n    this.connection.onmessage = this.onMessage.bind(this);\n\n    this.state = {\n      socketMessage: { data: '' }\n    };\n  \n  }\n  onOpen() {\n    console.log('Connection is opened...');\n  }\n  onError(error) {\n    console.log('Connection error occured!', error);\n  }\n\n  onMessage(message) {\n    this.setState({socketMessage: message});\n  }\n  render() {\n    return (\n      <div className=\"app-container\"> \n\n        <MapGrid />\n        <Chat \n          connection={this.connection}\n          socketMessage={this.state.socketMessage.data}\n        />\n      </div>\n    );\n   }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1> Village Defense </h1>\n        <WebSocketConnection socketMessage={this.state.socketMessage}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}