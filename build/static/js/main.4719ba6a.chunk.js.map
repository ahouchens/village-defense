{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WebSocketConnection","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","connection","WebSocket","window","location","host","onopen","onOpen","onerror","onError","onmessage","onMessage","bind","assertThisInitialized","state","socketMessage","data","console","log","error","message","setState","react_default","a","createElement","App_Chat","Component","Chat","_this2","handleKeyPress","handleChange","chatMessage","disabled","chatName","authorColor","chatHistory","input","React","createRef","e","key","send","target","value","prevProps","socketMessageObject","type","userName","prevState","concat","toConsumableArray","JSON","parse","length","id","map","chatHistoryItem","time","style","color","author","text","statusText","onKeyPress","onChange","App","_this3","counter","App_WebSocketConnection","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4719ba6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass WebSocketConnection extends Component {\n  constructor(props) {\n    super(props);\n\n    //let socketUrl = window.location.href;\n    //url.protocol = url.protocol.replace('http', 'ws');\n    // const localSocketUrl = 'ws://127.0.0.1:5000';\n    this.connection = new WebSocket('ws://' + window.location.host);\n\n\n    this.connection.onopen = this.onOpen;\n    this.connection.onerror = this.onError;\n    this.connection.onmessage = this.onMessage.bind(this);\n\n    this.state = {\n      socketMessage: { data: '' }\n    };\n  \n  }\n  onOpen() {\n    console.log('Connection is opened...');\n  }\n  onError(error) {\n    console.log('Connection error occured!', error);\n  }\n\n  onMessage(message) {\n    this.setState({socketMessage: message});\n  }\n  render() {\n    return (\n      <div>\n        <Chat \n          connection={this.connection}\n          socketMessage={this.state.socketMessage.data}\n        />\n      </div>\n    );\n   }\n}\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      chatMessage: '',\n      disabled: '',\n      chatName: false,\n      authorColor: false,\n      chatHistory: [],\n    };\n    this.input = React.createRef();\n  }\n\n  handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      let chatMessage = this.state.chatMessage;\n      if (!chatMessage) {\n        return;\n      }\n   \n      this.props.connection.send(chatMessage);\n      this.setState({\n        chatMessage: '',\n        // disabled: 'disabled',\n      });\n\n      // we know that the first message sent from a user their name  \n      if (this.state.chatName === false) {\n        this.setState({ chatName: chatMessage });\n      }\n    }\n  }\n  handleChange(e) {\n    this.setState({chatMessage: e.target.value});\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.socketMessage !== this.props.socketMessage) {\n      let socketMessage = this.socketMessageObject();\n\n      if (!socketMessage) {\n        return;\n      }\n\n      if (socketMessage.type === 'color') {\n        this.setState({\n          chatName: socketMessage.userName,\n          authorColor: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'history') {\n        this.setState({\n          chatHistory: socketMessage.data\n        });\n      }\n\n      if (socketMessage.type === 'message') {\n        this.setState(prevState => ({\n          chatHistory: [...prevState.chatHistory, socketMessage.data]\n        }));\n      }\n    }\n  }\n  socketMessageObject() {\n    try {\n      return JSON.parse(this.props.socketMessage);\n    } catch (e) {\n      console.log('Invalid JSON: ', this.props.socketMessage);\n      return false;\n    }\n  }\n  isUserConnected() {\n    return !!this.socketMessageObject();\n  }\n  statusText() {\n    if (this.state.chatName.length > 0) {\n      return this.state.chatName;\n    }\n  \n    return 'Enter name:';\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"content\">\n            {this.state.chatHistory.map((chatHistoryItem) =>\n              <p key={chatHistoryItem.time} style={{color: chatHistoryItem.color}}>{chatHistoryItem.author}: {chatHistoryItem.text}</p>\n            )}\n        </div>\n        <div>\n          <span\n            id=\"status\" \n            style={{\n              color: this.state.authorColor\n          }}>\n            {this.statusText()}\n          </span>\n          <input\n            type=\"text\" \n            id=\"input\" \n            value={this.state.chatMessage}\n            disabled={this.state.disabled}\n            onKeyPress={this.handleKeyPress}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n  render() {\n    return (\n      <div>\n        <WebSocketConnection socketMessage={this.state.socketMessage}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}